<?xml version="1.0" encoding="UTF-8"?>
<configuration>
	<!-- 引入application.properties里变量 -->
    <springProperty scope="context" name="loggingPath" source="logging.path"/>
    <springProperty scope="context" name="loggingLevel" source="logging.level" defaultValue="INFO"/>

    <!-- 应用名称 -->
    <property name="APP_NAME" value="logback-wx" />
    <!--日志文件的保存路径, 首先查找系统属性-Dlog.dir,如果存在就使用其；否则，在当前目录下创建名为logs目录做日志存放的目录 -->
    <!-- <property name="LOG_HOME" value="${log.dir:-logs}/${APP_NAME}" /> -->
    <!-- <property name="LOG_HOME" value="${webapplogback.root}log/${APP_NAME}" /> -->
    <property name="LOG_HOME" value="${loggingPath}/${APP_NAME}" />
    <!-- <property name="LOG_HOME" value="/Users/chen/Documents/logback" /> -->
    <!-- 日志最大的历史 30天 -->
    <property name="maxHistory" value="30" />
    <!-- 日志文件多大分包 -->
    <property name="logFileSize" value="10MB" />
    <!-- 日志输出格式 -->
    <property name="ENCODER_PATTERN" value="%d{yyyy-MM-dd HH:mm:ss.SSS} [%thread] %-5level %logger{80} - %msg%n" />
	<!-- 输出路径 -->
    <property name="FILENAME_OUTPUT" value="${LOG_HOME}/wx_output__%d{yyyy-MM-dd HH-mm}__%i.log" />
    <property name="FILENAME_WARN"   value="${LOG_HOME}/wx_warn__%d{yyyy-MM-dd HH-mm}__%i.log" />
    <property name="FILENAME_SYNC"   value="${LOG_HOME}/wx_sync___%d{yyyy-MM-dd HH-mm}__%i.log" />
    <contextName>${APP_NAME}</contextName>



    <!-- 文件日志：输出全部日志到文件 -->
    <appender name="OUTPUT_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${FILENAME_OUTPUT}</fileNamePattern>
            <!-- 可选节点，控制保留的归档文件的最大数量，超出数量就删除旧文件假设设置每个月滚动，且<maxHistory>是6,
            		则只保存最近6个月的文件，删除之前的旧文件。注意，删除旧文件是，那些为了归档而创建的目录也会被删除 -->
            <maxHistory>${maxHistory}</maxHistory>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <!-- 当一个日志大小大于10KB，则换一个新的日志。日志名的%i从0开始，自动递增 -->
                <maxFileSize>${logFileSize}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${ENCODER_PATTERN}</pattern>
        </encoder>
    </appender>

    <!-- 错误日志：用于将错误日志输出到独立文件 -->
    <appender name="WARN_FILE" class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${FILENAME_WARN}</fileNamePattern>
            <maxHistory>${maxHistory}</maxHistory>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>${logFileSize}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${ENCODER_PATTERN}</pattern>
        </encoder>
        <!-- 过滤器，只记录WARN级别的日志 -->
        <!-- 果日志级别等于配置级别，过滤器会根据onMath 和 onMismatch接收或拒绝日志。 -->
        <!-- DENY，那么记录事件立即被抛弃，不再经过剩余过滤器；
			 NEUTRAL，那么有序列表里的下一个过滤器会接着处理记录事件；
			 ACCEPT，那么记录事件被立即处理，不再经过剩余过滤器。 -->
		<!-- 可以写自定义类过滤日志 extends Filter<ILoggingEvent> -->
        <filter class="ch.qos.logback.classic.filter.ThresholdFilter">
        	<!-- 设置过滤级别 -->
            <level>WARN</level>
            <!-- 用于配置符合过滤条件的操作 -->
            <!-- <onMatch>ACCEPT</onMatch> -->
            <!-- 用于配置不符合过滤条件的操作 -->
            <!-- <onMismatch>DENY</onMismatch> -->
        </filter>
    </appender>

    <!-- 独立输出的同步日志 -->
    <appender name="SYNC_FILE"  class="ch.qos.logback.core.rolling.RollingFileAppender">
        <rollingPolicy class="ch.qos.logback.core.rolling.TimeBasedRollingPolicy">
            <fileNamePattern>${FILENAME_SYNC}</fileNamePattern>
            <maxHistory>${maxHistory}</maxHistory>
            <timeBasedFileNamingAndTriggeringPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedFNATP">
                <maxFileSize>${logFileSize}</maxFileSize>
            </timeBasedFileNamingAndTriggeringPolicy>
        </rollingPolicy>
        <encoder class="ch.qos.logback.classic.encoder.PatternLayoutEncoder">
            <pattern>${ENCODER_PATTERN}</pattern>
        </encoder>
    </appender>

	<!--日志异步到数据库 -->
    <!-- <appender name="DB" class="ch.qos.logback.classic.db.DBAppender">
        <connectionSource class="ch.qos.logback.core.db.DriverManagerConnectionSource">
           <dataSource class="com.mchange.v2.c3p0.ComboPooledDataSource">
              <driverClass>com.mysql.jdbc.Driver</driverClass>
              <url>jdbc:mysql://127.0.0.1:3306/databaseName</url>
              <user>root</user>
              <password>root</password>
            </dataSource>
        </connectionSource>
    </appender> -->


	<!-- 开发环境 -->
	<springProfile name="dev">
		<!-- 控制台日志：输出全部日志到控制台 -->
		<appender name="CONSOLE" class="ch.qos.logback.core.ConsoleAppender">
			<encoder>
				<pattern>dev:${ENCODER_PATTERN}</pattern>
			</encoder>
		</appender>
<!-- 
		<logger name="com.ogoodo.wx" level="debug"/> -->
		<logger name="com.ogoodo.wx" level="trace"/>

		<root level="${loggingLevel}">
			<appender-ref ref="CONSOLE" />
			<appender-ref ref="OUTPUT_FILE" />
			<appender-ref ref="WARN_FILE" />
		</root>
	</springProfile>



	<!-- 测试环境 -->
	<springProfile name="stg1">
	    <!-- 控制台日志：输出全部日志到控制台 -->
	    <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
	        <encoder>
	            <Pattern>stg1:${ENCODER_PATTERN}</Pattern>
	        </encoder>
	    </appender>

		<!--
		为单独的包配置日志级别，若root的级别大于此级别， 此处级别也会输出
		应用场景：生产环境一般不会将日志级别设置为trace或debug，但是为详细的记录SQL语句的情况，
		可将hibernate的级别设置为debug，如此一来，日志文件中就会出现hibernate的debug级别日志，
		而其它包则会按root的级别输出日志
		-->
		<!-- 指定一个包，name必填，additivity选填：控制是否继承父类appender，默认true -->
		<logger name="org.hibernate.SQL" level="DEBUG"/>
		<logger name="org.hibernate.jdbc" level="DEBUG"/>
		<!-- <logger name="org.springframework" level="DEBUG"/> -->
		<logger name="com.ogoodo.wx" level="debug"/>
		<logger name="log.sync" level="DEBUG" addtivity="true">
			<appender-ref ref="SYNC_FILE" />
		</logger>

		<root level="${loggingLevel}">
			<appender-ref ref="OUTPUT_FILE" />
			<appender-ref ref="WARN_FILE" />
		</root>
	</springProfile>


	<!-- 生产环境 -->
	<springProfile name="prod">

		<logger name="com.ogoodo.wx" level="debug"/>

		<root level="${loggingLevel}">
			<appender-ref ref="OUTPUT_FILE" />
			<appender-ref ref="WARN_FILE" />
			<!-- <appender-ref ref="WARN_FILE" /> -->
		</root>
	</springProfile>



</configuration>
